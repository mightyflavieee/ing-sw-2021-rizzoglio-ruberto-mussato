Index: src/main/java/it/polimi/ingsw/project/client/ClientCLI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.project.client;\r\n\r\nimport it.polimi.ingsw.project.model.Match;\r\nimport it.polimi.ingsw.project.model.Player;\r\nimport it.polimi.ingsw.project.model.board.DevCardPosition;\r\nimport it.polimi.ingsw.project.model.board.ShelfFloor;\r\nimport it.polimi.ingsw.project.model.board.Warehouse;\r\nimport it.polimi.ingsw.project.model.board.card.developmentCard.DevelopmentCard;\r\nimport it.polimi.ingsw.project.model.board.card.leaderCard.LeaderCard;\r\nimport it.polimi.ingsw.project.model.market.Market;\r\nimport it.polimi.ingsw.project.model.playermove.*;\r\nimport it.polimi.ingsw.project.model.resource.Resource;\r\nimport it.polimi.ingsw.project.model.resource.ResourceType;\r\nimport it.polimi.ingsw.project.utils.Pair;\r\n\r\nimport java.io.IOException;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.net.Socket;\r\nimport java.util.*;\r\n\r\npublic class ClientCLI {\r\n\r\n    private String ip;\r\n    private int port;\r\n    private boolean active = true;\r\n    private Match match;\r\n    private Scanner stdin;\r\n    private String myNickname; //da inizializzare\r\n\r\n    public ClientCLI(String ip, int port) {\r\n        this.ip = ip;\r\n        this.port = port;\r\n        this.match = null;\r\n    }\r\n\r\n    public void setMatch(Match match) {\r\n        this.match = match;\r\n    }\r\n\r\n    public Optional<Match> getMatch() {\r\n        return Optional.ofNullable(match);\r\n    }\r\n\r\n    public synchronized boolean isActive() {\r\n        return active;\r\n    }\r\n\r\n    public synchronized void setActive(boolean active) {\r\n        this.active = active;\r\n    }\r\n\r\n    public Thread asyncReadFromSocket(final ObjectInputStream socketIn) {\r\n        Thread t = new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                try {\r\n                    while (isActive()) {\r\n                        Object inputObject = socketIn.readObject();\r\n                        if (inputObject instanceof String) {\r\n                            System.out.println((String) inputObject);\r\n                        } else if (inputObject instanceof Match) {\r\n                            setMatch((Match) inputObject);\r\n                        } else {\r\n                            throw new IllegalArgumentException();\r\n                        }\r\n                    }\r\n                } catch (Exception e) {\r\n                    setActive(false);\r\n                }\r\n            }\r\n        });\r\n        t.start();\r\n        return t;\r\n    }\r\n\r\n    public Thread asyncCli( final ObjectOutputStream socketOut) {//sends to server and shows the match\r\n        Thread t = new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    while (isActive()) {\r\n                        if(getMatch().isEmpty()) {\r\n                            String inputLine = stdin.nextLine();\r\n                            socketOut.writeObject(inputLine);\r\n                        }\r\n                        else {\r\n                            Move move = handleTurn();\r\n                            if(move!=null) {\r\n                                socketOut.writeObject(move);\r\n                            }\r\n                        }\r\n                        socketOut.flush();\r\n                    }\r\n                } catch (Exception e) {\r\n                    setActive(false);\r\n                }\r\n            }\r\n        });\r\n        t.start();\r\n        return t;\r\n    }\r\n\r\n    public Move handleTurn(){\r\n        //quando do come comando 0 entro SEMPRE in una funzione che mi permette di visualizzare le varie informazioni\r\n\r\n        switch (this.match.getTurnPhase(myNickname)) {\r\n            case WaitPhase:\r\n                viewer();\r\n                break;\r\n            case InitialPhase:\r\n            case EndPhase:\r\n                return handleLeaderAction();\r\n            case MainPhase:\r\n                return handleMainPhase();\r\n\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    private Move handleLeaderAction() {\r\n        //quando do come comando 0 entro SEMPRE in una funzione che mi permette di visualizzare le varie informazioni\r\n\r\n        while(true) {\r\n            System.out.println(\"Do you want to perform a Leader Card Action?\\n\" +\r\n                    \"0 - See information;\" +\r\n                    \"1 - Discard Leader Card;\\n\" +\r\n                    \"2 - Activate Leader Card;\\n\" +\r\n                    \"3 - No.\\n\" +\r\n                    \"> \");\r\n            String answer = stdin.nextLine();\r\n            switch (answer) {\r\n                case \"0\":\r\n                    viewer();\r\n                case \"1\":\r\n                    this.match.getLeaderCards(this.myNickname);\r\n                    System.out.println(\"Give the LeaderCard id that you want to discard\");\r\n                    return new DiscardLeaderCardMove(stdin.nextLine());\r\n                case \"2\":\r\n                    return constructActivateLeaderCardMove();\r\n                case \"3\":\r\n                    System.out.println(\"Are you sure? [y/n]\");\r\n                    if(stdin.nextLine().equals(\"y\")) {\r\n                        return new NoMove();\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private Move handleMainPhase() {\r\n        //quando do come comando 0 entro SEMPRE in una funzione che mi permette di visualizzare le varie informazioni\r\n        Move playerMove = null;\r\n        boolean isInputError = false;\r\n        do {\r\n            System.out.println(\"What do you want to do?\\n\" +\r\n                    \"0 - See informations\" +\r\n                    \"1 - Take Resources from Market\\n\" +\r\n                    \"2 - Buy one Development Card\\n\" +\r\n                    \"3 - Activate Production.\\n\" +\r\n                    \"> \");\r\n            do {\r\n                String answer = stdin.nextLine();\r\n                switch (answer) {\r\n                    case \"0\":\r\n                        viewer();\r\n                        break;\r\n                    case \"1\":\r\n                        isInputError = false;\r\n                        playerMove = handleTakeMarketResourcesMove();\r\n                        break;\r\n                    case \"2\":\r\n                        isInputError = false;\r\n                        playerMove = constructBuyDevCardMove();\r\n                        break;\r\n                    case \"3\":\r\n                        isInputError = false;\r\n                        playerMove = constructProductionMove();\r\n                        break;\r\n                    default:\r\n                        System.out.println(\"Please provide a correct number.\\n\" + \"> \");\r\n                        isInputError = true;\r\n                        break;\r\n                }\r\n            } while (isInputError);\r\n        } while (playerMove == null);\r\n        return playerMove;\r\n    }\r\n\r\n    // constructs the ProductionMove according to the player choices\r\n    private Move constructActivateLeaderCardMove() {\r\n        Move playerMove = null;\r\n        boolean isCorrectID = false;\r\n        boolean isMovePossible = false;\r\n        String leaderCardID = null;\r\n        if (!this.match.getCurrentPlayer().getBoard().getLeaderCards().isEmpty()) {\r\n            this.match.getLeaderCards(this.myNickname);\r\n            do {\r\n                System.out.println(\"Provide the ID of the LeaderCard you want to activate: (Type 'quit' to go back)\\n\" + \"> \");\r\n                String answer = this.stdin.nextLine();\r\n                for (LeaderCard leaderCard : this.match.getCurrentPlayer().getBoard().getLeaderCards()) {\r\n                    if (answer.equals(leaderCard.getId())) {\r\n                        isCorrectID = true;\r\n                        leaderCardID = answer;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!isCorrectID) {\r\n                    System.out.println(\"Provide a correct ID\");\r\n                } else {\r\n                    if (isActivateLeaderCardMovePossible(leaderCardID)) {\r\n                        playerMove = new ActivateLeaderCardMove(leaderCardID);\r\n                        isMovePossible = true;\r\n                    } else {\r\n                        System.out.println(\"You cannot activate the Leader Card with ID=\" + leaderCardID + \" because you\" +\r\n                                \" don't have the requirements for the activation! Please choose another Leader Card or go back!\\n\");\r\n                    }\r\n                }\r\n            } while (!isMovePossible);\r\n        } else {\r\n            System.out.println(\"No Leader Cards present. Cannot execute move.\");\r\n        }\r\n        return playerMove;\r\n    }\r\n\r\n    //TODO\r\n    private boolean isActivateLeaderCardMovePossible(String leaderCardID) {\r\n\r\n        return false;\r\n    }\r\n\r\n    // constructs the BuyDevCardMove according to the player choices\r\n    //TODO verify if the resources to eliminate chosen by the player are correct\r\n    private Move constructBuyDevCardMove() {\r\n        Move playerMove = null;\r\n        Map<ResourceType, Integer> resourcesToEliminateWarehouse = new HashMap<>();\r\n        Map<ResourceType, Integer> resourcesToEliminateChest = new HashMap<>();\r\n        boolean skipElimination = false;\r\n        List<DevelopmentCard> availableDevCards = this.match.getCardContainer().getAvailableDevCards();\r\n        String devCardToBuyID = showAndSelectDevCardToBuy(availableDevCards);\r\n        if (devCardToBuyID != null) {\r\n            while (true) {\r\n                System.out.println(\"Do you want to eliminate resources from the Warehouse? (y/n): \");\r\n                String answer = this.stdin.nextLine();\r\n                if (answer.equals(\"y\")) {\r\n                    resourcesToEliminateWarehouse = selectResourcesToEliminate(devCardToBuyID, \"Warehouse\");\r\n                    break;\r\n                } else {\r\n                    if (answer.equals(\"n\")) {\r\n                        skipElimination = true;\r\n                        break;\r\n                    } else {\r\n                        System.out.println(\"Choose a correct option.\\n\");\r\n                    }\r\n                }\r\n            }\r\n            if (!resourcesToEliminateWarehouse.isEmpty() || skipElimination) {\r\n                skipElimination = false;\r\n                while (true) {\r\n                    System.out.println(\"Do you want to eliminate resources from the Chest? (y/n): \");\r\n                    String answer = this.stdin.nextLine();\r\n                    if (answer.equals(\"y\")) {\r\n                        resourcesToEliminateChest = selectResourcesToEliminate(devCardToBuyID, \"Chest\");\r\n                        break;\r\n                    } else {\r\n                        if (answer.equals(\"n\")) {\r\n                            skipElimination = true;\r\n                            break;\r\n                        } else {\r\n                            System.out.println(\"Choose a correct option.\\n\");\r\n                        }\r\n                    }\r\n                }\r\n                if (!resourcesToEliminateChest.isEmpty() || skipElimination) {\r\n                    if (resourcesToEliminateWarehouse.isEmpty() && resourcesToEliminateChest.isEmpty()) {\r\n                        System.out.println(\"You did not select any resource to be eliminated. Move aborted.\\n\");\r\n                    } else {\r\n                        DevCardPosition position = selectPositionForDevCard(devCardToBuyID);\r\n                        if (position != null) {\r\n                            playerMove = new BuyDevCardMove(devCardToBuyID, position, resourcesToEliminateWarehouse, resourcesToEliminateChest);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return playerMove;\r\n    }\r\n\r\n    // provides the id of the DevelopmentCard the player wants to buy. Returns null if the player\r\n    // wants to go back\r\n    private String showAndSelectDevCardToBuy(List<DevelopmentCard> availableDevCards) {\r\n        boolean isCardPresent = false;\r\n        String answer = null;\r\n        System.out.println(\"Development Cards available for purchase:\\n\");\r\n        for (DevelopmentCard devCard : availableDevCards) {\r\n            System.out.println(devCard.toString());\r\n        }\r\n        while (!isCardPresent) {\r\n            System.out.println(\"Which Development Card do you want to buy? (Provide the correct ID or type \" +\r\n                    \"'back' to go back): \");\r\n            answer = stdin.nextLine();\r\n            if (!answer.equals(\"back\")) {\r\n                for (DevelopmentCard devCard : availableDevCards) {\r\n                    if (answer.equals(devCard.getId())) {\r\n                        isCardPresent = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!isCardPresent) {\r\n                    System.out.println(\"A Development Card with that ID is not available. Please provide a correct ID \" +\r\n                            \"or go back.\");\r\n                }\r\n            } else {\r\n                answer = null;\r\n                break;\r\n            }\r\n        }\r\n        return answer;\r\n    }\r\n\r\n    // helper for the selectResourcesToEliminate() function, asks the player to select how many\r\n    // of each resource to eliminate\r\n    private void selectResourcesToEliminateHelper(\r\n            Map<ResourceType, Integer> resourcesToEliminate,\r\n            ResourceType type) {\r\n        String stringType = null;\r\n        if (type.equals(ResourceType.Coin)) {\r\n            stringType = \"Coin\";\r\n        } else {\r\n            if (type.equals(ResourceType.Servant)) {\r\n                stringType = \"Servant\";\r\n            } else {\r\n                if (type.equals(ResourceType.Shield)) {\r\n                    stringType = \"Shield\";\r\n                } else {\r\n                    stringType = \"Stone\";\r\n                }\r\n            }\r\n        }\r\n        while (true) {\r\n            System.out.println(\"How many \" + stringType + \"s do you want to eliminate? (insert number): \");\r\n            try {\r\n                int numResourcesToEliminate = Integer.parseInt(this.stdin.nextLine());\r\n                resourcesToEliminate.put(type, numResourcesToEliminate);\r\n                break;\r\n            } catch (Exception e) {\r\n                System.out.println(\"Insert an answer with the correct format (number).\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // provides the resources to eliminate from the Warehouse or the Chest for the purchase of the\r\n    // DevelopmentCard the player wants to buy. Returns null if the player wants to go back.\r\n    private Map<ResourceType, Integer> selectResourcesToEliminate(String devCardToBuyID, String location) {\r\n        Map<ResourceType, Integer> resourcesToEliminate = new HashMap<>();\r\n        String answer = null;\r\n        boolean goBack = false;\r\n        boolean isDone = false;\r\n        do {\r\n            System.out.println(\"Select the resource type to eliminate from the \" + location + \" :\" +\r\n                    \"0 - Go Back;\\n\" +\r\n                    \"1 - Coin;\\n\" +\r\n                    \"2 - Servant;\\n\" +\r\n                    \"3 - Shield;\\n\" +\r\n                    \"4 - Stone;\\n\" +\r\n                    \"Enter here your answer: \");\r\n            answer = stdin.nextLine();\r\n            switch (answer) {\r\n                case \"0\":\r\n                    goBack = true;\r\n                    break;\r\n                case \"1\":\r\n                    selectResourcesToEliminateHelper(resourcesToEliminate, ResourceType.Coin);\r\n                    break;\r\n                case \"2\":\r\n                    selectResourcesToEliminateHelper(resourcesToEliminate, ResourceType.Servant);\r\n                    break;\r\n                case \"3\":\r\n                    selectResourcesToEliminateHelper(resourcesToEliminate, ResourceType.Shield);\r\n                    break;\r\n                case \"4\":\r\n                    selectResourcesToEliminateHelper(resourcesToEliminate, ResourceType.Stone);\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Choose a correct option.\");\r\n            }\r\n            while (true) {\r\n                System.out.println(\"Do you want to keep choosing or do you want to go to the\" +\r\n                        \" next step? (Press 1 to keep choosing and 2 to go forward): \");\r\n                answer = this.stdin.nextLine();\r\n                if (answer.equals(\"1\")) {\r\n                    break;\r\n                } else {\r\n                    if (answer.equals(\"2\")) {\r\n                        isDone = true;\r\n                        break;\r\n                    } else {\r\n                        System.out.println(\"Choose a correct option.\");\r\n                    }\r\n                }\r\n            }\r\n        } while (!isDone && !goBack);\r\n        if (goBack) {\r\n            resourcesToEliminate = null;\r\n        }\r\n        return resourcesToEliminate;\r\n    }\r\n\r\n    // provides the position on the MapTray of the DevelopmentCard once it is bought. Returns null\r\n    // if the player wants to go back.\r\n    private DevCardPosition selectPositionForDevCard(String devCardToBuyID) {\r\n        boolean goBack = false;\r\n        DevelopmentCard devCardToBuy = this.match.getCardContainer().fetchCard(devCardToBuyID);\r\n        DevCardPosition chosenPosition = null;\r\n        String answer = null;\r\n        do {\r\n            while (chosenPosition == null) {\r\n                System.out.println(\"Choose an option:\\n\" +\r\n                        \"0 - Go Back\\n\" +\r\n                        \"1 - Left;\\n\" +\r\n                        \"2 - Center;\\n\" +\r\n                        \"3 - Right.\\n\" +\r\n                        \"Enter here your answer: \");\r\n                answer = this.stdin.nextLine();\r\n                switch (answer) {\r\n                    case \"0\":\r\n                        goBack = true;\r\n                        break;\r\n                    case \"1\":\r\n                        chosenPosition = DevCardPosition.Left;\r\n                        break;\r\n                    case \"2\":\r\n                        chosenPosition = DevCardPosition.Center;\r\n                        break;\r\n                    case \"3\":\r\n                        chosenPosition = DevCardPosition.Right;\r\n                        break;\r\n                    default:\r\n                        System.out.println(\"Choose a correct option.\");\r\n                        break;\r\n                }\r\n            }\r\n            // verifies that the player can put the DevelopmentCard in the position he/she indicated\r\n            if (!goBack) {\r\n                int lastPosition = this.match.getBoardByPlayerNickname(this.myNickname).getMapTray().get(chosenPosition).size();\r\n                DevelopmentCard devCardInLastPosition = this.match.getBoardByPlayerNickname(this.myNickname).getMapTray().get(chosenPosition).get(lastPosition);\r\n                if (devCardInLastPosition.getLevel().compareTo(devCardToBuy.getLevel()) > 0) {\r\n                    chosenPosition = null;\r\n                    System.out.println(\"The level of the upper Development Card present in the section you selected of the \" +\r\n                            \"Map Tray is higher than the one of the Card you want to buy. Please select another position \" +\r\n                            \"or go back.\");\r\n                }\r\n            }\r\n        } while (chosenPosition == null || !goBack);\r\n        return chosenPosition;\r\n    }\r\n\r\n    // constructs the ProductionMove according to the player choices\r\n    //TODO verify if the resources to eliminate chosen by the player are correct\r\n    private Move constructProductionMove() {\r\n        Move playerMove = null;\r\n        boolean goBack = false;\r\n        ProductionType productionType = null;\r\n        do {\r\n            System.out.println(\"Which type of production do you want to activate?\\n\" +\r\n                    \"0 - Go Back;\\n\" +\r\n                    \"1 - Board Production;\\n\" +\r\n                    \"2 - Development Card Production;\\n\" +\r\n                    \"3 - Leader Card Production.\\n\" +\r\n                    \"4 - Board and Development Card Production;\\n\" +\r\n                    \"5 - Board and Leader Card Production;\\n\" +\r\n                    \"6 - Board, Development Card and Leader Card Production;\\n\" +\r\n                    \"7 - Development Card and Leader Card Production;\\n\" +\r\n                    \"> \");\r\n            String answer = this.stdin.nextLine();\r\n            switch (answer) {\r\n                case \"0\":\r\n                    goBack = true;\r\n                    break;\r\n                case \"1\":\r\n                    productionType = ProductionType.Board;\r\n                    break;\r\n                case \"2\":\r\n                    productionType = ProductionType.DevCard;\r\n                    break;\r\n                case \"3\":\r\n                    productionType = ProductionType.LeaderCard;\r\n                    break;\r\n                case \"4\":\r\n                    productionType = ProductionType.BoardAndDevCard;\r\n                    break;\r\n                case \"5\":\r\n                    productionType = ProductionType.BoardAndLeaderCard;\r\n                    break;\r\n                case \"6\":\r\n                    productionType = ProductionType.BoardAndDevCardAndLeaderCard;\r\n                    break;\r\n                case \"7\":\r\n                    productionType = ProductionType.DevCardAndLeader;\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Choose a correct option.\");\r\n                    break;\r\n            }\r\n        } while (productionType == null && !goBack);\r\n        if (!goBack) {\r\n            Map<ResourceType, Integer> resourcesToEliminateWarehouse = new HashMap<>();\r\n            Map<ResourceType, Integer> resourcesToEliminateChest = new HashMap<>();\r\n            String devCardID = null;\r\n            String leaderCardID = null;\r\n            switch (productionType) {\r\n                case Board:\r\n                    // selects which resources to eliminate and from where\r\n                    selectResourcesToEliminateForBoardProduction(resourcesToEliminateWarehouse, resourcesToEliminateWarehouse);\r\n                    //TODO verify resources (if present and enough to satisfy production)\r\n                    //constructs the move\r\n                    playerMove = new ProductionMove(null, null, resourcesToEliminateWarehouse,\r\n                            resourcesToEliminateChest, productionType, selectBoardOrPerkManufacturedResource(productionType));\r\n                    break;\r\n                case DevCard:\r\n                    devCardID = getDevCardIDForProduction();\r\n                    if (devCardID.equals(\"quit\")) {\r\n                        goBack = true;\r\n                    } else {\r\n                        resourcesToEliminateWarehouse = selectResourcesToEliminate(devCardID, \"Warehouse\");\r\n                        resourcesToEliminateChest = selectResourcesToEliminate(devCardID, \"Chest\");\r\n                        //TODO verify resources (if present and enough to satisfy production)\r\n                        playerMove = new ProductionMove(devCardID, null, resourcesToEliminateWarehouse,\r\n                                resourcesToEliminateChest, productionType, null);\r\n                    }\r\n                    break;\r\n                case LeaderCard:\r\n                case BoardAndLeaderCard:\r\n                    leaderCardID = getLeaderCardIDForProduction();\r\n                    if (leaderCardID.equals(\"quit\")) {\r\n                        goBack = true;\r\n                    } else {\r\n                        resourcesToEliminateWarehouse = selectResourcesToEliminate(devCardID, \"Warehouse\");\r\n                        resourcesToEliminateChest = selectResourcesToEliminate(devCardID, \"Chest\");\r\n                        //TODO verify resources (if present and enough to satisfy production)\r\n                        playerMove = new ProductionMove(null, leaderCardID, resourcesToEliminateWarehouse,\r\n                                resourcesToEliminateChest, productionType, selectBoardOrPerkManufacturedResource(productionType));\r\n                    }\r\n                    break;\r\n                case BoardAndDevCard:\r\n                    devCardID = getDevCardIDForProduction();\r\n                    if (devCardID.equals(\"quit\")) {\r\n                        goBack = true;\r\n                    } else {\r\n                        resourcesToEliminateWarehouse = selectResourcesToEliminate(devCardID, \"Warehouse\");\r\n                        resourcesToEliminateChest = selectResourcesToEliminate(devCardID, \"Chest\");\r\n                        //TODO verify resources (if present and enough to satisfy production)\r\n                        playerMove = new ProductionMove(devCardID, null, resourcesToEliminateWarehouse,\r\n                                resourcesToEliminateChest, productionType, selectBoardOrPerkManufacturedResource(productionType));\r\n                    }\r\n                    break;\r\n                case BoardAndDevCardAndLeaderCard:\r\n                case DevCardAndLeader:\r\n                    devCardID = getDevCardIDForProduction();\r\n                    leaderCardID = getLeaderCardIDForProduction();\r\n                    if (devCardID.equals(\"quit\")) {\r\n                        goBack = true;\r\n                    } else {\r\n                        resourcesToEliminateWarehouse = selectResourcesToEliminate(devCardID, \"Warehouse\");\r\n                        resourcesToEliminateChest = selectResourcesToEliminate(devCardID, \"Chest\");\r\n                        //TODO verify resources (if present and enough to satisfy production)\r\n                        playerMove = new ProductionMove(devCardID, leaderCardID, resourcesToEliminateWarehouse,\r\n                                resourcesToEliminateChest, productionType, selectBoardOrPerkManufacturedResource(productionType));\r\n                    }\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Choose a correct option.\");\r\n                    break;\r\n            }\r\n        }\r\n        return playerMove;\r\n    }\r\n\r\n    // handles the CLI aspect of choosing the LeaderCard for the ProductionMove\r\n    private String getLeaderCardIDForProduction() {\r\n        boolean isCorrectID = false;\r\n        boolean goBack = false;\r\n        String leaderCardID = null;\r\n        List<LeaderCard> leaderCards = this.match.getCurrentPlayer().getBoard().getLeaderCards();\r\n        System.out.println(\"Choose a Development Card:\\n\");\r\n        for (LeaderCard leaderCard : leaderCards) {\r\n            System.out.println(leaderCard + \"\\n\");\r\n        }\r\n        do {\r\n            System.out.println(\"Provide the ID of the Leader Card for the production or type 'quit'\" +\r\n                    \" to go back:\\n\" +\r\n                    \"> \");\r\n            String answer = this.stdin.nextLine();\r\n            if (answer.equals(\"quit\")) {\r\n                goBack = true;\r\n            } else {\r\n                for (LeaderCard leaderCard : leaderCards) {\r\n                    if (leaderCard.getId().equals(answer)) {\r\n                        isCorrectID = true;\r\n                        leaderCardID = answer;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!isCorrectID) { System.out.println(\"Choose a correct ID!\"); }\r\n            }\r\n        } while (!isCorrectID);\r\n        if (goBack) {\r\n            return \"quit\";\r\n        }\r\n        return leaderCardID;\r\n    }\r\n\r\n    // handles the CLI aspect of choosing the DevelopmentCard for the ProductionMove\r\n    private String getDevCardIDForProduction() {\r\n        boolean isCorrectID = false;\r\n        boolean goBack = false;\r\n        String devCardID = null;\r\n        Map<DevCardPosition, DevelopmentCard> productionDevCards = this.match.getCurrentPlayer().getBoard().getCurrentProductionCards();\r\n        System.out.println(\"Choose a Development Card:\\n\");\r\n        for (DevCardPosition position : productionDevCards.keySet()) {\r\n            if (productionDevCards.get(position) != null) {\r\n                System.out.println(position + \":\\n\" + productionDevCards.get(position) + \"\\n\");\r\n            }\r\n        }\r\n        do {\r\n            System.out.println(\"Provide the ID of the Development Card for the production or type 'quit'\" +\r\n                    \" to go back:\\n\" +\r\n                    \"> \");\r\n            String answer = this.stdin.nextLine();\r\n            if (answer.equals(\"quit\")) {\r\n                goBack = true;\r\n            } else {\r\n                for (DevCardPosition position : productionDevCards.keySet()) {\r\n                    if (productionDevCards.get(position) != null) {\r\n                        if (productionDevCards.get(position).getId().equals(answer)) {\r\n                            isCorrectID = true;\r\n                            devCardID = answer;\r\n                        }\r\n                    }\r\n                }\r\n                if (!isCorrectID) { System.out.println(\"Choose a correct ID!\"); }\r\n            }\r\n        } while (!isCorrectID);\r\n        if (goBack) {\r\n            return \"quit\";\r\n        }\r\n        return devCardID;\r\n    }\r\n\r\n    // handles the CLI aspect of choosing which resources to eliminate for a Board production for the ProductionMove\r\n    private void selectResourcesToEliminateForBoardProduction(Map<ResourceType, Integer> resourcesToEliminateWarehouse,\r\n                                                              Map<ResourceType, Integer> resourcesToEliminateChest) {\r\n        boolean eliminateFromWarehouse = false;\r\n        boolean eliminateFromChest = false;\r\n        int toBeEliminated = 2;\r\n        while (true) {\r\n            System.out.println(\"Do you want to eliminate resources from the Warehouse for the Board production? [y/n]:\\n\" +\r\n                    \"> \");\r\n            String answer = this.stdin.nextLine();\r\n            if (answer.equals(\"y\")) {\r\n                eliminateFromWarehouse = true;\r\n                while (toBeEliminated == 2) {\r\n                    System.out.println(\"How many types of resources do you want to eliminate from the Warehouse? [1/2]:\\n\" +\r\n                            \"> \");\r\n                    answer = this.stdin.nextLine();\r\n                    if (answer.equals(\"1\")) {\r\n                        toBeEliminated = 1;\r\n                        int count = 0;\r\n                        do {\r\n                            System.out.println(\"Choose the resource you want to eliminate from the Warehouse:\\n\" +\r\n                                    \"1 - Coin;\\n\" +\r\n                                    \"2 - Servant;\\n\" +\r\n                                    \"3 - Shield;\\n\" +\r\n                                    \"4 - Stone.\\n\" +\r\n                                    \"> \");\r\n                            answer = this.stdin.nextLine();\r\n                            switch (answer) {\r\n                                case \"1\":\r\n                                    resourcesToEliminateWarehouse.put(ResourceType.Coin, 1);\r\n                                    count++;\r\n                                    break;\r\n                                case \"2\":\r\n                                    resourcesToEliminateWarehouse.put(ResourceType.Servant, 1);\r\n                                    count++;\r\n                                    break;\r\n                                case \"3\":\r\n                                    resourcesToEliminateWarehouse.put(ResourceType.Shield, 1);\r\n                                    count++;\r\n                                    break;\r\n                                case \"4\":\r\n                                    resourcesToEliminateWarehouse.put(ResourceType.Stone, 1);\r\n                                    count++;\r\n                                    break;\r\n                                default:\r\n                                    System.out.println(\"Choose a correct option.\");\r\n                                    break;\r\n                            }\r\n                        } while (count < 1);\r\n                    } else {\r\n                        if (answer.equals(\"2\")) {\r\n                            toBeEliminated = 0;\r\n                            int count = 0;\r\n                            do {\r\n                                System.out.println(\"Choose the resource you want to add to the list of resources to be eliminated \" +\r\n                                        \"from the Warehouse:\\n\" +\r\n                                        \"1 - Coin;\\n\" +\r\n                                        \"2 - Servant;\\n\" +\r\n                                        \"3 - Shield;\\n\" +\r\n                                        \"4 - Stone.\\n\" +\r\n                                        \"> \");\r\n                                answer = this.stdin.nextLine();\r\n                                switch (answer) {\r\n                                    case \"1\":\r\n                                        if (resourcesToEliminateWarehouse.get(ResourceType.Coin) == 1) {\r\n                                            resourcesToEliminateWarehouse.put(ResourceType.Coin, 2);\r\n                                        } else {\r\n                                            resourcesToEliminateWarehouse.put(ResourceType.Coin, 1);\r\n                                        }\r\n                                        count++;\r\n                                        break;\r\n                                    case \"2\":\r\n                                        if (resourcesToEliminateWarehouse.get(ResourceType.Servant) == 1) {\r\n                                            resourcesToEliminateWarehouse.put(ResourceType.Servant, 2);\r\n                                        } else {\r\n                                            resourcesToEliminateWarehouse.put(ResourceType.Servant, 1);\r\n                                        }\r\n                                        count++;\r\n                                        break;\r\n                                    case \"3\":\r\n                                        if (resourcesToEliminateWarehouse.get(ResourceType.Shield) == 1) {\r\n                                            resourcesToEliminateWarehouse.put(ResourceType.Shield, 2);\r\n                                        } else {\r\n                                            resourcesToEliminateWarehouse.put(ResourceType.Shield, 1);\r\n                                        }\r\n                                        count++;\r\n                                        break;\r\n                                    case \"4\":\r\n                                        if (resourcesToEliminateWarehouse.get(ResourceType.Stone) == 1) {\r\n                                            resourcesToEliminateWarehouse.put(ResourceType.Stone, 2);\r\n                                        } else {\r\n                                            resourcesToEliminateWarehouse.put(ResourceType.Stone, 1);\r\n                                        }\r\n                                        count++;\r\n                                        break;\r\n                                    default:\r\n                                        System.out.println(\"Choose a correct option.\");\r\n                                        break;\r\n                                }\r\n                            } while (count < 2);\r\n                        } else {\r\n                            System.out.println(\"Choose a correct number.\");\r\n                        }\r\n                }\r\n\r\n                }\r\n                break;\r\n            } else {\r\n                if (answer.equals(\"no\")) {\r\n                    break;\r\n                } else {\r\n                    System.out.println(\"Choose a correct option.\");\r\n                }\r\n            }\r\n        }\r\n        if (toBeEliminated == 1) {\r\n            int count = 0;\r\n            do {\r\n                System.out.println(\"Choose the resource you want to eliminate from the Chest:\\n\" +\r\n                        \"1 - Coin;\\n\" +\r\n                        \"2 - Servant;\\n\" +\r\n                        \"3 - Shield;\\n\" +\r\n                        \"4 - Stone.\\n\" +\r\n                        \"> \");\r\n                String answer = this.stdin.nextLine();\r\n                switch (answer) {\r\n                    case \"1\":\r\n                        resourcesToEliminateChest.put(ResourceType.Coin, 1);\r\n                        count++;\r\n                        break;\r\n                    case \"2\":\r\n                        resourcesToEliminateChest.put(ResourceType.Servant, 1);\r\n                        count++;\r\n                        break;\r\n                    case \"3\":\r\n                        resourcesToEliminateChest.put(ResourceType.Shield, 1);\r\n                        count++;\r\n                        break;\r\n                    case \"4\":\r\n                        resourcesToEliminateChest.put(ResourceType.Stone, 1);\r\n                        count++;\r\n                        break;\r\n                    default:\r\n                        System.out.println(\"Choose a correct option.\");\r\n                        break;\r\n                }\r\n            } while (count < 1);\r\n        } else {\r\n            if (toBeEliminated == 2) {\r\n                int count = 0;\r\n                do {\r\n                    System.out.println(\"Choose the resource you want to add to the list of resources to be eliminated \" +\r\n                            \"from the Warehouse:\\n\" +\r\n                            \"1 - Coin;\\n\" +\r\n                            \"2 - Servant;\\n\" +\r\n                            \"3 - Shield;\\n\" +\r\n                            \"4 - Stone.\\n\" +\r\n                            \"> \");\r\n                    String answer = this.stdin.nextLine();\r\n                    switch (answer) {\r\n                        case \"1\":\r\n                            if (resourcesToEliminateChest.get(ResourceType.Coin) == 1) {\r\n                                resourcesToEliminateChest.put(ResourceType.Coin, 2);\r\n                            } else {\r\n                                resourcesToEliminateChest.put(ResourceType.Coin, 1);\r\n                            }\r\n                            count++;\r\n                            break;\r\n                        case \"2\":\r\n                            if (resourcesToEliminateChest.get(ResourceType.Servant) == 1) {\r\n                                resourcesToEliminateChest.put(ResourceType.Servant, 2);\r\n                            } else {\r\n                                resourcesToEliminateChest.put(ResourceType.Servant, 1);\r\n                            }\r\n                            count++;\r\n                            break;\r\n                        case \"3\":\r\n                            if (resourcesToEliminateChest.get(ResourceType.Shield) == 1) {\r\n                                resourcesToEliminateChest.put(ResourceType.Shield, 2);\r\n                            } else {\r\n                                resourcesToEliminateChest.put(ResourceType.Shield, 1);\r\n                            }\r\n                            count++;\r\n                            break;\r\n                        case \"4\":\r\n                            if (resourcesToEliminateChest.get(ResourceType.Stone) == 1) {\r\n                                resourcesToEliminateChest.put(ResourceType.Stone, 2);\r\n                            } else {\r\n                                resourcesToEliminateChest.put(ResourceType.Stone, 1);\r\n                            }\r\n                            count++;\r\n                            break;\r\n                        default:\r\n                            System.out.println(\"Choose a correct option.\");\r\n                            break;\r\n                    }\r\n                } while (count < 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    // helper function for selectBoardOrPerkManufacturedResource(), handles the main CLI logic\r\n    private void selectBoardOrPerkManufacturedResourceHelper(ProductionType productionType,\r\n                                                             List<ResourceType> boardOrPerkManufacturedResource) {\r\n        do {\r\n            System.out.println(\"Choose the \" + productionType + \" production manufactured resource:\\n\" +\r\n                    \"1 - Coin;\\n\" +\r\n                    \"2 - Servant;\\n\" +\r\n                    \"3 - Shield;\\n\" +\r\n                    \"4 - Stone.\\n\" +\r\n                    \"> \");\r\n            String answer = this.stdin.nextLine();\r\n            switch (answer) {\r\n                case \"1\":\r\n                    boardOrPerkManufacturedResource.add(ResourceType.Coin);\r\n                    break;\r\n                case \"2\":\r\n                    boardOrPerkManufacturedResource.add(ResourceType.Servant);\r\n                    break;\r\n                case \"3\":\r\n                    boardOrPerkManufacturedResource.add(ResourceType.Shield);\r\n                    break;\r\n                case \"4\":\r\n                    boardOrPerkManufacturedResource.add(ResourceType.Stone);\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Choose a correct number.\");\r\n                    break;\r\n            }\r\n        } while (boardOrPerkManufacturedResource.size() == 0);\r\n    }\r\n\r\n    // asks the player to choose which resource he/she wants to manufacture for the Board or LeaderCard production\r\n    // or both combined\r\n    private List<ResourceType> selectBoardOrPerkManufacturedResource(ProductionType productionType) {\r\n        List<ResourceType> boardOrPerkManufacturedResource = new ArrayList<>();\r\n        if (productionType.equals(ProductionType.Board) || productionType.equals(ProductionType.LeaderCard)) {\r\n            selectBoardOrPerkManufacturedResourceHelper(productionType, boardOrPerkManufacturedResource);\r\n        }\r\n        if (productionType.equals(ProductionType.BoardAndDevCardAndLeaderCard) ||\r\n                productionType.equals(ProductionType.BoardAndLeaderCard)) {\r\n            selectBoardOrPerkManufacturedResourceHelper(ProductionType.Board, boardOrPerkManufacturedResource);\r\n            selectBoardOrPerkManufacturedResourceHelper(ProductionType.LeaderCard, boardOrPerkManufacturedResource);\r\n        }\r\n        return boardOrPerkManufacturedResource;\r\n    }\r\n\r\n    public void viewer() {\r\n        System.out.println(\"0 - Go Back\\n\" +\r\n                \"1 - show informations about the others players\\n\" +\r\n                \"2 - show your Points\\n\" +\r\n                \"3 - show your Marker Position\\n\" +\r\n                \"4 - show your Leader Cards\\n\" +\r\n                \"5 - show your Development Cards\\n\" +\r\n                \"6 - show the Market\");\r\n        String answer = stdin.nextLine();\r\n        switch (answer) {\r\n            case \"0\":\r\n                break;\r\n            case \"1\":\r\n                viewer(myNickname);\r\n            case \"2\":\r\n                System.out.println(\"Your points are: \" + this.match.getVictoryPoints(myNickname));\r\n                break;\r\n            case \"3\":\r\n                System.out.println(\"Your marker position is: \" + this.match.getMarkerPosition(myNickname) +\"/24\");\r\n                break;\r\n            case \"4\":\r\n                System.out.println(\"Your Leader Cards are: \" + this.match.getLeaderCards(myNickname) );\r\n                break;\r\n            case \"5\":\r\n                break;\r\n            case \"6\":\r\n                System.out.println(this.match.getMarket());\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        return;\r\n\r\n    }\r\n\r\n    private void viewer(String myNickname) {\r\n        //shows informations about other players\r\n        System.out.println(\"Your opponents are : \" + this.match.getOpponents(myNickname) +\r\n                \"\\n tell the nickname\");\r\n        String opponent = stdin.nextLine();\r\n        System.out.println(\"0 - Go Back\\n\" +\r\n                \"1 - show \" + opponent + \" Points\\n\" +\r\n                \"2 - show \" + opponent + \" Marker Position\\n\" +\r\n                \"3 - show \" + opponent + \" Leader Cards\\n\" +\r\n                \"4 - show \" + opponent + \" Development Cards\\n\");\r\n        String answer = stdin.nextLine();\r\n        switch (answer) {\r\n            case \"0\":\r\n                break;\r\n            case \"1\":\r\n                System.out.println(opponent + \" points are: \" + this.match.getVictoryPoints(opponent));\r\n            case \"2\":\r\n                System.out.println(opponent + \" marker position is: \" + this.match.getMarkerPosition(opponent) +\"/24\");\r\n                break;\r\n            case \"3\":\r\n                System.out.println(opponent + \" Leader Cards are: \" + this.match.getLeaderCards(opponent) );\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private TakeMarketResourcesMove handleTakeMarketResourcesMove(){\r\n        List <Resource> resourcesToDiscard = new ArrayList<>();\r\n        Market market = this.match.getMarket();\r\n        System.out.println(market);\r\n        String answer;\r\n        int axis, position;\r\n        do {\r\n            System.out.println(\"do you want to insert the marble horizontally or vertically?\\n\" +\r\n                    \"0 - vertical\\n\" +\r\n                    \"1 - horizontal\\n\" +\r\n                    \"2 - go back and to an other move\");\r\n            axis = Integer.parseInt(stdin.nextLine());\r\n        }while (axis<0 || axis > 2);\r\n        if(axis == 2 ){\r\n            return null;\r\n        }\r\n        if(axis == 0){\r\n            do {\r\n                System.out.println(\"Which column?\\n\" +\r\n                        \"from 0 to 3, from left to right\");\r\n                position = Integer.parseInt(stdin.nextLine());\r\n            }while(position>3 || position<0);\r\n        }else{\r\n            do {\r\n                System.out.println(\"Which line?\\n\" +\r\n                        \"from 0 to 2, from bottom to up\");\r\n                position = Integer.parseInt(stdin.nextLine());\r\n            }while(position>2 || position<0);\r\n        }\r\n\r\n        ResourceType transmutationPerk = match.getTransmutationPerk(myNickname);\r\n        List<Resource> resourceList = market.insertMarble(axis,position,transmutationPerk);\r\n        Boolean hasRedMarble = false;\r\n        for(int i = 0; i < resourceList.size(); i++){\r\n            if(resourceList.get(i).getType() == ResourceType.Faith){\r\n                hasRedMarble = true;\r\n                resourceList.remove(i);\r\n                break;\r\n            }\r\n        }\r\n        Warehouse warehouse = match.getWarehouse(myNickname);\r\n        Map<ResourceType, Integer> resourcesInHand = warehouse.listToMapResources(resourceList);\r\n        System.out.println(warehouse);\r\n        System.out.println(\"Resources in hand :\" + resourcesInHand.entrySet().stream().map(x -> x.getKey() + \" \" + x.getValue().toString()));\r\n        while(resourcesInHand.size()>0){\r\n            System.out.println(\"0 - show Warehouse\\n\" +\r\n                    \"1 - show resources in hand\\n\" +\r\n                    \"2 - insert resources in the shelves\\n\" +\r\n                    \"3 - insert resources in the extra deposit\\n\" +\r\n                    \"4 - discard resources\\n\" +\r\n                    \"5 - swap shelves\");\r\n            answer = stdin.nextLine();\r\n            switch (answer){\r\n                case \"0\":\r\n                    System.out.println(warehouse);\r\n                    break;\r\n                case \"1\":\r\n                    System.out.println(\"Resources in hand :\" + resourcesInHand.entrySet().stream().map(x -> x.getKey() + \" \" + x.getValue().toString()));\r\n                    break;\r\n                case \"2\":\r\n                    this.insertInShelves(warehouse,resourcesInHand);\r\n                    break;\r\n                case \"3\":\r\n                    this.insertInExtraDeposit(warehouse,resourcesInHand);\r\n                    break;\r\n                case \"4\":\r\n                    resourcesToDiscard.addAll(this.discardResources(warehouse,resourcesInHand)) ;\r\n                    break;\r\n                case \"5\":\r\n                    swapShelves(warehouse);\r\n                    break;\r\n                default:\r\n                    System.out.println(\"wrong input\");\r\n                    break;\r\n            }\r\n        }\r\n        return new TakeMarketResourcesMove(warehouse,resourcesToDiscard,market,hasRedMarble);\r\n    }\r\n    private void insertInShelves(Warehouse warehouse,Map<ResourceType, Integer> resourcesInHand){\r\n\r\n        System.out.println(\"Which Resource type do you want to put in the shelves?\\n\");\r\n        Pair<ResourceType,Integer> resourceSelected = resourceSelector(resourcesInHand);\r\n        ShelfFloor shelfFloor;\r\n        if(resourceSelected == null){\r\n            return;\r\n        }\r\n            System.out.println(\"1 - First floor\\n\" +\r\n                    \"2 - second floor\\n\" +\r\n                    \"3 - third floor\");\r\n            switch (stdin.nextLine()){\r\n                case \"1\":\r\n                    shelfFloor = ShelfFloor.First;\r\n                    break;\r\n                case \"2\":\r\n                    shelfFloor = ShelfFloor.Second;\r\n                    break;\r\n                case \"3\":\r\n                    shelfFloor = ShelfFloor.Third;\r\n                    break;\r\n                default:\r\n                    System.out.println(\"wrong input\");\r\n                    return;\r\n            }\r\n            List<Resource> resourceList = new ArrayList<>();\r\n            for(int i = 0; i < resourceSelected._2; i++){\r\n                resourceList.add(new Resource(resourceSelected._1));\r\n            }\r\n            if(!warehouse.insertInShelves(shelfFloor, resourceList)){\r\n                System.out.println(\"forbidden action\");}\r\n            else{\r\n                int oldvalue = resourcesInHand.remove(resourceSelected._1);\r\n                oldvalue = oldvalue - resourceSelected._2;\r\n                if(oldvalue>0){\r\n                    resourcesInHand.put(resourceSelected._1, oldvalue);\r\n                }\r\n            }\r\n                return;\r\n\r\n\r\n\r\n\r\n    }\r\n    private Pair<ResourceType,Integer> resourceSelector(Map<ResourceType, Integer> resourcesInHand){\r\n        //returns a map if i have the resources, otherwise null\r\n        String resourceType;\r\n        ResourceType type;\r\n        int n;\r\n        System.out.println(\"1 - coin\\n\" +\r\n                \"2 - stone\\n\" +\r\n                \"3 - shield\\n\" +\r\n                \"4 - servant\");\r\n        resourceType = stdin.nextLine();\r\n        System.out.println(\"how many?\");\r\n        n = Integer.parseInt(stdin.nextLine());\r\n        switch (resourceType){\r\n            case \"1\":\r\n                type = ResourceType.Coin;\r\n                break;\r\n            case \"2\":\r\n                type = ResourceType.Stone;\r\n                break;\r\n            case \"3\":\r\n                type = ResourceType.Shield;\r\n                break;\r\n            case \"4\":\r\n                type = ResourceType.Servant;\r\n                break;\r\n            default:\r\n                System.out.println(\"wrong input\");\r\n                return null;\r\n        }\r\n        if(resourcesInHand.get(type) >= n){\r\n            return  new Pair<>(type,n);\r\n        }\r\n        else {\r\n            System.out.println(\"Not enough resources\");\r\n            return null;\r\n        }\r\n    }\r\n    private void insertInExtraDeposit(Warehouse warehouse,Map<ResourceType, Integer> resourcesInHand){\r\n        System.out.println(\"Which Resource type do you want to put in the extra deposit?\\n\");\r\n        Pair<ResourceType,Integer> resourceSelected = resourceSelector(resourcesInHand);\r\n        if(resourceSelected == null){\r\n            return;\r\n        }\r\n        List<Resource> resourceList = new ArrayList<>();\r\n        for(int i = 0; i < resourceSelected._2; i++){\r\n            resourceList.add(new Resource(resourceSelected._1));\r\n        }\r\n        if(!warehouse.insertInExtraDeposit(resourceList)){\r\n            System.out.println(\"forbidden action\");\r\n        }\r\n        else{\r\n            int oldvalue = resourcesInHand.remove(resourceSelected._1);\r\n            oldvalue = oldvalue - resourceSelected._2;\r\n            if(oldvalue>0){\r\n                resourcesInHand.put(resourceSelected._1, oldvalue);\r\n            }\r\n        }\r\n        return;\r\n\r\n    }\r\n    private List<Resource> discardResources(Warehouse warehouse,Map<ResourceType, Integer> resourcesInHand){\r\n        System.out.println(\"Which Resource type do you want to discard?\\n\");\r\n        Pair<ResourceType,Integer> resourceSelected = resourceSelector(resourcesInHand);\r\n        if(resourceSelected == null){\r\n            return new ArrayList<>();\r\n        }\r\n        int oldvalue = resourcesInHand.remove(resourceSelected._1);\r\n        oldvalue = oldvalue - resourceSelected._2;\r\n        if(oldvalue>0){\r\n            resourcesInHand.put(resourceSelected._1, oldvalue);\r\n        }\r\n        List<Resource> resources = new ArrayList<>();\r\n        for(int i = 0; i < resourceSelected._2; i++){\r\n            resources.add(new Resource(resourceSelected._1));\r\n        }\r\n        return resources;\r\n\r\n    }\r\n    private void swapShelves(Warehouse warehouse){\r\n        System.out.println(\"0 - show Warehouse\\n\" +\r\n                \"1 - swap first and second floor\\n\" +\r\n                \"2 - swap second and third floor\\n\" +\r\n                \"3 - swap third e first floor\\n\" +\r\n                \"4 - go back\");\r\n        switch (stdin.nextLine()){\r\n            case \"0\":\r\n                System.out.println(warehouse);\r\n                break;\r\n            case \"1\":\r\n                if(warehouse.getShelves().get(ShelfFloor.Second).size()>1){\r\n                    System.out.println(\"forbidden action\");\r\n                }else\r\n                {\r\n                    warehouse.swapShelves(ShelfFloor.First,ShelfFloor.Second);\r\n                }\r\n                break;\r\n            case \"2\":\r\n                if(warehouse.getShelves().get(ShelfFloor.Third).size()>2){\r\n                    System.out.println(\"forbidden action\");\r\n                }else\r\n                {\r\n                    warehouse.swapShelves(ShelfFloor.Third,ShelfFloor.Second);\r\n                }\r\n                break;\r\n            case \"3\":\r\n                if(warehouse.getShelves().get(ShelfFloor.Third).size()>1){\r\n                    System.out.println(\"forbidden action\");\r\n                }else\r\n                {\r\n                    warehouse.swapShelves(ShelfFloor.Third,ShelfFloor.First);\r\n                }\r\n                break;\r\n            case \"4\":\r\n                break;\r\n            default:\r\n                System.out.println(\"wrong input\");\r\n                break;\r\n        }\r\n    }\r\n    public void run() throws IOException {\r\n        Socket socket = new Socket(ip, port);\r\n        System.out.println(\"Connection established\");\r\n        ObjectOutputStream socketOut = new ObjectOutputStream(socket.getOutputStream());\r\n        ObjectInputStream socketIn = new ObjectInputStream(socket.getInputStream());\r\n        stdin = new Scanner(System.in);\r\n        try {\r\n            Thread t0 = asyncReadFromSocket(socketIn);\r\n            Thread t1 = asyncCli(socketOut);\r\n            t0.join();\r\n            t1.join();\r\n        } catch (InterruptedException | NoSuchElementException e) {\r\n            System.out.println(\"Connection closed from the client side\");\r\n        } finally {\r\n            stdin.close();\r\n            socketIn.close();\r\n            socketOut.close();\r\n            socket.close();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/project/client/ClientCLI.java b/src/main/java/it/polimi/ingsw/project/client/ClientCLI.java
--- a/src/main/java/it/polimi/ingsw/project/client/ClientCLI.java	(revision fd135305e7aacd6ce9bc131943fdb120c0fd4908)
+++ b/src/main/java/it/polimi/ingsw/project/client/ClientCLI.java	(date 1621604468998)
@@ -913,6 +913,7 @@
                 break;
             case "1":
                 viewer(myNickname);
+                break;
             case "2":
                 System.out.println("Your points are: " + this.match.getVictoryPoints(myNickname));
                 break;
