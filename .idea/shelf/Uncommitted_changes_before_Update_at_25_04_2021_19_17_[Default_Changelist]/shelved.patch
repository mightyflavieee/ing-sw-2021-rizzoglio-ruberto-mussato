Index: src/main/java/it/polimi/ingsw/project/model/Match.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.project.model;\r\n\r\nimport it.polimi.ingsw.project.model.actionTokens.ActionTokenContainer;\r\nimport it.polimi.ingsw.project.model.board.DevCardPosition;\r\nimport it.polimi.ingsw.project.model.board.ShelfFloor;\r\nimport it.polimi.ingsw.project.model.board.card.CardColor;\r\nimport it.polimi.ingsw.project.model.board.card.developmentCard.DevelopmentCard;\r\nimport it.polimi.ingsw.project.model.market.Market;\r\nimport it.polimi.ingsw.project.model.playermove.PlayerMove;\r\nimport it.polimi.ingsw.project.model.resource.ResourceType;\r\n\r\nimport java.util.*;\r\n\r\npublic class Match {\r\n  private List<Player> playerList;\r\n  private Market market;\r\n  private CardContainer cardContainer;\r\n  private ActionTokenContainer actionTokenContainer;\r\n  private Player currentPlayer;\r\n  private boolean isLastTurn;\r\n  private boolean isOver;\r\n\r\n  public Match(List<Player> playerList) {\r\n    this.playerList = playerList;\r\n    this.market = new Market();\r\n    this.cardContainer = new CardContainer();\r\n    if (playerList.size() == 1) {\r\n      actionTokenContainer = new ActionTokenContainer();\r\n    }\r\n  }\r\n\r\n  private void playLastTurn() {\r\n    int playerIndex = this.playerList.indexOf(currentPlayer);\r\n    while (playerIndex != this.playerList.size() - 1) {\r\n      currentPlayer = nextPlayer();\r\n      currentPlayer.playTurn(this.market, this.cardContainer, this.actionTokenContainer);\r\n    }\r\n  }\r\n\r\n  private Player nextPlayer() {\r\n    int playerIndex = this.playerList.indexOf(currentPlayer);\r\n    playerIndex = playerIndex + 1;\r\n    if (playerIndex > this.playerList.size() - 1) {\r\n      playerIndex = 0;\r\n    }\r\n    return playerList.get(playerIndex);\r\n  }\r\n\r\n  public List<Player> getPlayerList() {\r\n    return playerList;\r\n  }\r\n\r\n  public Market getMarket() {\r\n    return market;\r\n  }\r\n\r\n  public CardContainer getCardContainer() {\r\n    return cardContainer;\r\n  }\r\n\r\n  public ActionTokenContainer getActionTokenContainer() {\r\n    return actionTokenContainer;\r\n  }\r\n\r\n  public boolean getIsLastTurn() {\r\n    return this.isLastTurn;\r\n  }\r\n\r\n  public void notifyFaithMapsForCouncil(int numTile) {\r\n    // TODO devo notificare anche lorenzo?\r\n    playerList.forEach(x -> x.papalCouncil(numTile));\r\n    if (numTile == 3) {\r\n      this.isLastTurn = true; // qualcuno è arrivato all'ultima casella\r\n    }\r\n  }\r\n\r\n  public void notifyFaithMapsForDiscard(int numDiscardedResources) {\r\n    // TODO devo far avanzare anche lorenzo?\r\n    for (int i = 0; i < numDiscardedResources; i++) {\r\n      playerList.stream().filter(x -> x.getNickname() != currentPlayer.getNickname()).forEach(Player::moveForward);\r\n    }\r\n  }\r\n\r\n  public void playGame() {\r\n    // da modificare per MVC\r\n    int playerIndex = 0;\r\n    Collections.shuffle(this.playerList);\r\n    currentPlayer = this.playerList.get(playerIndex);\r\n    while (true) {\r\n      boolean endGame = currentPlayer.playTurn(this.market, this.cardContainer, this.actionTokenContainer);\r\n      if (endGame) {\r\n        playLastTurn();\r\n        break;\r\n      }\r\n      this.updatePlayer();\r\n    }\r\n  }\r\n\r\n  public void addVictoryPoints(int newVictoryPoints) {\r\n    currentPlayer.addVictoryPoints(newVictoryPoints);\r\n  }\r\n\r\n  public void discard(CardColor cardColor) {\r\n    if (cardContainer.discard(cardColor))\r\n      this.youLost();\r\n  }\r\n\r\n  private void youLost() {\r\n    // TODO\r\n    this.isOver = true;\r\n  }\r\n\r\n  public void end() {\r\n    if (this.isLastTurn == true\r\n        && this.currentPlayer.getNickname() == this.playerList.get(this.playerList.size() - 1).getNickname()) {\r\n      this.isOver = true;\r\n    }\r\n  }\r\n\r\n  public Player getCurrentPlayer() {\r\n    return currentPlayer;\r\n  }\r\n\r\n  public void updatePlayer() {\r\n    this.currentPlayer = this.nextPlayer();\r\n  }\r\n\r\n  public boolean performMove(PlayerMove playerMove) {\r\n    // TODO\r\n    return false;\r\n  };\r\n\r\n  public final Match clone() {\r\n    // final Match result = new Object();\r\n    // result.actionTokenContainer = actionTokenContainer;\r\n    // result.cardContainer = cardContainer;\r\n    // result.currentPlayer = currentPlayer;\r\n    // result.isLastTurn = isLastTurn;\r\n    // result.isOver = isOver;\r\n    // result.market = market;\r\n    // result.playerList = playerList;\r\n    return null;\r\n  }\r\n\r\n  public boolean isFeasibleDiscardLeaderCardMove(String leaderCardID) {\r\n    return currentPlayer.isFeasibleDiscardLeaderCardMove(leaderCardID);\r\n  }\r\n\r\n  public void performDiscardLeaderCardMove(String leaderCardID) {\r\n    this.currentPlayer.performDiscardLeaderCardMove(leaderCardID);\r\n  }\r\n\r\n  public boolean isFeasibleChangeShelvesMove(ShelfFloor aFloor, ShelfFloor bFloor) {\r\n    return currentPlayer.isFeasibleChangeShelvesMove(aFloor, bFloor);\r\n  }\r\n\r\n  public void performChangeShelvesMove(ShelfFloor aFloor, ShelfFloor bFloor) {\r\n    this.currentPlayer.performChangeShelvesMove(aFloor, bFloor);\r\n  }\r\n\r\n  public boolean isFeasibleBuyDevCardMove(String devCardID, Map<ResourceType, Integer> resourcesToEliminateWarehouse,\r\n      Map<ResourceType, Integer> resourcesToEliminateChest, DevCardPosition position) {\r\n    if (!this.cardContainer.isCardPresent(devCardID)) {\r\n      return false;\r\n    } else {\r\n      DevelopmentCard devCard = this.cardContainer.fetchCard(devCardID);\r\n      return this.currentPlayer.isFeasibleBuyDevCardMove(devCard, resourcesToEliminateWarehouse,\r\n          resourcesToEliminateChest, position);\r\n    }\r\n  }\r\n\r\n  public void performBuyDevCardMove(String devCardID, Map<ResourceType, Integer> resourcesToEliminateWarehouse,\r\n      Map<ResourceType, Integer> resourcesToEliminateChest, DevCardPosition position) {\r\n    DevelopmentCard devCard = this.cardContainer.removeBoughtCard(devCardID);\r\n    this.currentPlayer.performBuyDevCardMove(devCard, resourcesToEliminateWarehouse, resourcesToEliminateChest,\r\n        position);\r\n  }\r\n\r\n  public boolean isFeasibleDevCardProductionMove(String devCardID,\r\n      Map<ResourceType, Integer> resourcesToEliminateWarehouse, Map<ResourceType, Integer> resourcesToEliminateChest) {\r\n    if (!this.cardContainer.isCardPresent(devCardID)) {\r\n      return this.currentPlayer.isFeasibleDevCardProductionMove(devCardID, resourcesToEliminateWarehouse,\r\n          resourcesToEliminateChest);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public void performDevCardProductionMove(String devCardID, Map<ResourceType, Integer> resourcesToEliminateWarehouse,\r\n      Map<ResourceType, Integer> resourcesToEliminateChest) {\r\n    this.currentPlayer.performDevCardProductionMove(devCardID, resourcesToEliminateWarehouse,\r\n        resourcesToEliminateChest);\r\n  }\r\n\r\n  public void soloGame() {\r\n    if (this.playerList.size() != 1) {\r\n      return;\r\n    } else {\r\n      this.actionTokenContainer.drawToken();\r\n    }\r\n  }\r\n\r\n  public void moveForwardBlack() {\r\n    if (24 == this.currentPlayer.moveForwardBlack()) // cioè se lorenzo è arrivato alla fine\r\n      this.youLost();\r\n  }\r\n\r\n  public void performDiscardResourcesMove() {\r\n    this.currentPlayer.performDiscardResourcesMove();\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/project/model/Match.java b/src/main/java/it/polimi/ingsw/project/model/Match.java
--- a/src/main/java/it/polimi/ingsw/project/model/Match.java	
+++ b/src/main/java/it/polimi/ingsw/project/model/Match.java	
@@ -191,12 +191,11 @@
         resourcesToEliminateChest);
   }
 
-  public void soloGame() {
-    if (this.playerList.size() != 1) {
-      return;
-    } else {
-      this.actionTokenContainer.drawToken();
-    }
+  public boolean isFeasibleExtractActionTokenMove(){
+    return this.playerList.size() == 1;
+  }
+  public void performExtractActionTokenMove(){
+    this.actionTokenContainer.drawToken();
   }
 
   public void moveForwardBlack() {
